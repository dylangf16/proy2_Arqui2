//------------------------------------------------------------------------------
// Testbench: SystolicArray8x8 Integration Test
//------------------------------------------------------------------------------
module SystolicArray8x8_tb;
    // Parameters
    localparam DATA_WIDTH = 16;
    localparam ACC_WIDTH  = 32;

    // Signals
    logic                                  clk;
    logic                                  rst_n;
    logic                                  start;
    logic signed [DATA_WIDTH-1:0]          A_matrix [0:7][0:7];
    logic signed [DATA_WIDTH-1:0]          B_matrix [0:7][0:7];
    logic signed [ACC_WIDTH -1:0]          C_out    [0:7][0:7];
    logic                                  done;

    // Expected results
    logic signed [ACC_WIDTH -1:0]          expected [0:7][0:7];
    integer i, j, k;
    bit all_pass;

    // Instantiate DUT
    SystolicArray8x8 #(
        .DATA_WIDTH(DATA_WIDTH),
        .ACC_WIDTH(ACC_WIDTH)
    ) dut (
        .clk      (clk),
        .rst_n    (rst_n),
        .start    (start),
        .A_matrix (A_matrix),
        .B_matrix (B_matrix),
        .C_out    (C_out),
        .done     (done)
    );

    // Clock generation
    initial clk = 0;
    always #5 clk = ~clk;

    initial begin
        $display("\n--- SystolicArray8x8 Integration Test Start ---");
        // Initialize
        rst_n = 0; start = 0;
        for (i = 0; i < 8; i++) begin
            for (j = 0; j < 8; j++) begin
                A_matrix[i][j] = i + j;      // simple test pattern
                B_matrix[i][j] = (i == j) ? 1 : 0; // identity multiplication
                expected[i][j] = 0;
            end
        end
        // Compute expected: A * I = A
        for (i = 0; i < 8; i++) begin
            for (j = 0; j < 8; j++) begin
                expected[i][j] = A_matrix[i][j];
            end
        end

        // Release reset
        #20 rst_n = 1;
        @(posedge clk);

        // Start computation
        start = 1;
        @(posedge clk);
        start = 0;

        // Wait until done
        wait (done == 1);
        @(posedge clk);

        // Check results
        all_pass = 1;
        for (i = 0; i < 8; i++) begin
            for (j = 0; j < 8; j++) begin
                if (C_out[i][j] !== expected[i][j]) begin
                    $error("[FAIL] Mismatch at [%0d][%0d]: got %0d, expected %0d",
                           i, j, C_out[i][j], expected[i][j]);
                    all_pass = 0;
                end
            end
        end
        if (all_pass) begin
            $display("[PASS] Integration Test: All outputs correct");
        end else begin
            $display("[FAIL] Integration Test: Some outputs incorrect");
        end
        $display("--- SystolicArray8x8 Integration Test End ---\n");
        $finish;
    end
endmodule