$date
	Mon Jun 16 18:08:18 2025
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module PE_SO_tb $end
$var parameter 32 ! DATA_WIDTH $end
$var parameter 32 " ACC_WIDTH $end
$var parameter 32 # CLK_PERIOD $end
$var reg 1 $ clk $end
$var reg 1 % rst_n $end
$var reg 1 & enable $end
$var reg 16 ' A_in [15:0] $end
$var reg 16 ( B_in [15:0] $end
$var reg 32 ) psum_in [31:0] $end
$var reg 16 * A_out [15:0] $end
$var reg 16 + B_out [15:0] $end
$var reg 32 , psum_out [31:0] $end
$var reg 32 - expected [31:0] $end
$var integer 32 . test_case $end
$var reg 1 / test_passed $end

$scope task reset_dut $end
$upscope $end

$scope task check_result $end
$var reg 32 0 expected_val [31:0] $end
$upscope $end

$scope task check_propagation $end
$var reg 16 1 expected_A [15:0] $end
$var reg 16 2 expected_B [15:0] $end
$upscope $end

$scope module dut $end
$var parameter 32 3 DATA_WIDTH $end
$var parameter 32 4 ACC_WIDTH $end
$var wire 1 5 clk $end
$var wire 1 6 rst_n $end
$var wire 1 7 enable $end
$var wire 1 8 A_in [15] $end
$var wire 1 9 A_in [14] $end
$var wire 1 : A_in [13] $end
$var wire 1 ; A_in [12] $end
$var wire 1 < A_in [11] $end
$var wire 1 = A_in [10] $end
$var wire 1 > A_in [9] $end
$var wire 1 ? A_in [8] $end
$var wire 1 @ A_in [7] $end
$var wire 1 A A_in [6] $end
$var wire 1 B A_in [5] $end
$var wire 1 C A_in [4] $end
$var wire 1 D A_in [3] $end
$var wire 1 E A_in [2] $end
$var wire 1 F A_in [1] $end
$var wire 1 G A_in [0] $end
$var wire 1 H B_in [15] $end
$var wire 1 I B_in [14] $end
$var wire 1 J B_in [13] $end
$var wire 1 K B_in [12] $end
$var wire 1 L B_in [11] $end
$var wire 1 M B_in [10] $end
$var wire 1 N B_in [9] $end
$var wire 1 O B_in [8] $end
$var wire 1 P B_in [7] $end
$var wire 1 Q B_in [6] $end
$var wire 1 R B_in [5] $end
$var wire 1 S B_in [4] $end
$var wire 1 T B_in [3] $end
$var wire 1 U B_in [2] $end
$var wire 1 V B_in [1] $end
$var wire 1 W B_in [0] $end
$var wire 1 X psum_in [31] $end
$var wire 1 Y psum_in [30] $end
$var wire 1 Z psum_in [29] $end
$var wire 1 [ psum_in [28] $end
$var wire 1 \ psum_in [27] $end
$var wire 1 ] psum_in [26] $end
$var wire 1 ^ psum_in [25] $end
$var wire 1 _ psum_in [24] $end
$var wire 1 ` psum_in [23] $end
$var wire 1 a psum_in [22] $end
$var wire 1 b psum_in [21] $end
$var wire 1 c psum_in [20] $end
$var wire 1 d psum_in [19] $end
$var wire 1 e psum_in [18] $end
$var wire 1 f psum_in [17] $end
$var wire 1 g psum_in [16] $end
$var wire 1 h psum_in [15] $end
$var wire 1 i psum_in [14] $end
$var wire 1 j psum_in [13] $end
$var wire 1 k psum_in [12] $end
$var wire 1 l psum_in [11] $end
$var wire 1 m psum_in [10] $end
$var wire 1 n psum_in [9] $end
$var wire 1 o psum_in [8] $end
$var wire 1 p psum_in [7] $end
$var wire 1 q psum_in [6] $end
$var wire 1 r psum_in [5] $end
$var wire 1 s psum_in [4] $end
$var wire 1 t psum_in [3] $end
$var wire 1 u psum_in [2] $end
$var wire 1 v psum_in [1] $end
$var wire 1 w psum_in [0] $end
$var reg 16 x A_out [15:0] $end
$var reg 16 y B_out [15:0] $end
$var reg 32 z psum_out [31:0] $end
$var reg 16 { A_reg [15:0] $end
$var reg 16 | B_reg [15:0] $end
$var reg 32 } psum_reg [31:0] $end
$var reg 32 ~ mult_result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0$
0%
0&
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
bx -
x/
b0 x
b0 y
b0 z
b0 {
b0 |
b0 }
b0 ~
bx 0
bx 1
bx 2
b10000 !
b100000 "
b1010 #
b10000 3
b100000 4
bx .
05
06
07
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
$end
#5000
1$
15
#10000
0$
05
#15000
1$
15
#20000
0$
05
#25000
1$
15
1%
16
#30000
0$
05
#35000
1$
15
#40000
0$
05
#45000
1$
15
b1 .
b10 '
b11 (
b110 -
1&
17
1W
1V
1F
b110 ~
#50000
0$
05
#55000
1$
15
b10 {
b11 |
b110 }
b110 z
b11 y
b10 x
b10 *
b11 +
b110 ,
#60000
0$
05
#65000
1$
15
b110 0
1/
b10 1
b11 2
b10 .
0&
07
b1100 }
b1100 z
b1100 ,
#70000
0$
05
#75000
1$
15
b110 )
b100 '
b101 (
b100000 -
1&
1v
1u
17
0V
1U
0F
1E
b10100 ~
#80000
0$
05
#85000
1$
15
b100 {
b101 |
b100000 }
b100000 z
b101 y
b100 x
b100 *
b101 +
b100000 ,
#90000
0$
05
#95000
1$
15
b100000 0
b100 1
b101 2
0&
07
b110100 }
b110100 z
b110100 ,
#100000
0$
05
#105000
1$
15
